"use server";

import dayjs from "dayjs";
import { eq } from "drizzle-orm";

import { db } from "@/db";
import {
  appointmentsTable,
  clientsTable,
  enterprisesTable,
  professionalsTable,
  servicesTable,
} from "@/db/schema";
import { formatCurrencyInCents } from "@/helpers/currency";
import { actionClient } from "@/lib/next-safe-action";
import { sendWhatsappMessage } from "@/lib/zapi-service";

import { getAvailableTimes } from "../get-available-times";
import { createAppointmentSchema } from "./schema";

export const createAppointment = actionClient
  .schema(createAppointmentSchema)
  .action(async ({ parsedInput }) => {
    const availableTimes = await getAvailableTimes({
      professionalId: parsedInput.professionalId,
      date: dayjs(parsedInput.date).format("YYYY-MM-DD"),
    });

    if (!availableTimes?.data) {
      throw new Error("No available times");
    }

    const isTimeAvailable = availableTimes.data?.some(
      (time) => time.value === parsedInput.time && time.available,
    );

    if (!isTimeAvailable) {
      throw new Error("Time not available");
    }

    const service = await db.query.servicesTable.findFirst({
      where: eq(servicesTable.id, parsedInput.serviceId),
    });

    if (!service) {
      throw new Error("Service not found");
    }

    const appointmentDateTime = dayjs(parsedInput.date)
      .set("hour", parseInt(parsedInput.time.split(":")[0]))
      .set("minute", parseInt(parsedInput.time.split(":")[1]))
      .toDate();

    // Obter empresa para saber o modo de confirmaÃ§Ã£o ANTES de salvar
    const [enterprise] = await db
      .select()
      .from(enterprisesTable)
      .where(eq(enterprisesTable.id, parsedInput.enterpriseId));

    if (!enterprise) return;

    // Buscar cliente e profissional (para mensagens)
    const [[client], [professional]] = await Promise.all([
      db.select().from(clientsTable).where(eq(clientsTable.id, parsedInput.clientId)),
      db
        .select()
        .from(professionalsTable)
        .where(eq(professionalsTable.id, parsedInput.professionalId)),
    ]);

    if (!client || !professional) return;

    const formattedDate = dayjs(appointmentDateTime).format("DD/MM/YYYY");
    const formattedPrice = formatCurrencyInCents(service.servicePriceInCents);

    // Gerar identificador de 4 dÃ­gitos
    const identifier = Math.floor(1000 + Math.random() * 9000).toString();

    // Insere jÃ¡ com o status correto conforme a configuraÃ§Ã£o da empresa
    const initialStatus = enterprise.confirmation === "automatic" ? "scheduled" : "not-confirmed" as const;
    await db
      .insert(appointmentsTable)
      .values({
        clientId: parsedInput.clientId,
        serviceId: parsedInput.serviceId,
        professionalId: parsedInput.professionalId,
        time: parsedInput.time,
        date: appointmentDateTime,
        enterpriseId: parsedInput.enterpriseId,
        appointmentPriceInCents: service.servicePriceInCents,
        status: initialStatus,
        identifier,
      });

    if (enterprise.confirmation === "automatic") {
      // Mensagem para o cliente
      const clientMsg = `OlÃ¡, ${client.name}! ðŸ‘‹\n\nSeu agendamento foi confirmado automaticamente. âœ…\n\nDados do agendamento:\nâ€¢ CÃ³digo do agendamento: #${identifier}\nâ€¢ Empresa: ${enterprise.name}\nâ€¢ ServiÃ§o: ${service.name}\nâ€¢ Profissional: ${professional.name}\nâ€¢ Data: ${formattedDate}\nâ€¢ HorÃ¡rio: ${parsedInput.time}\nâ€¢ Valor: ${formattedPrice}\n\nAtÃ© breve! ðŸ’š`;
      await sendWhatsappMessage(client.phoneNumber, clientMsg);

      // Mensagem para a empresa
      const enterpriseMsg = `OlÃ¡, ${enterprise.name}! ðŸ‘‹\n\nUm novo agendamento foi confirmado automaticamente. âœ…\n\nDados do agendamento:\nâ€¢ CÃ³digo do agendamento: #${identifier}\nâ€¢ Cliente: ${client.name}\nâ€¢ Telefone do cliente: ${client.phoneNumber}\nâ€¢ ServiÃ§o: ${service.name}\nâ€¢ Profissional: ${professional.name}\nâ€¢ Data: ${formattedDate}\nâ€¢ HorÃ¡rio: ${parsedInput.time}\nâ€¢ Valor: ${formattedPrice}`;
      await sendWhatsappMessage(enterprise.phoneNumber, enterpriseMsg);
    } else {
      // ConfirmaÃ§Ã£o manual: envia mensagem de texto orientando resposta CONFIRMAR ou CANCELAR
      const message = `OlÃ¡, ${enterprise.name}!\nCÃ³digo do agendamento: #${identifier} ðŸ‘‹\n\nHÃ¡ um novo agendamento aguardando confirmaÃ§Ã£o. ðŸ“…\n\nDados do agendamento:\nâ€¢ Cliente: ${client.name}\nâ€¢ Telefone do cliente: ${client.phoneNumber}\nâ€¢ ServiÃ§o: ${service.name}\nâ€¢ Profissional: ${professional.name}\nâ€¢ Data: ${formattedDate}\nâ€¢ HorÃ¡rio: ${parsedInput.time}\nâ€¢ Valor: ${formattedPrice}\n\nPara confirmar, responda com: CONFIRMAR ${identifier}.\nPara cancelar, responda com: CANCELAR ${identifier}.`;

      await sendWhatsappMessage(enterprise.phoneNumber, message);
    }
  });
